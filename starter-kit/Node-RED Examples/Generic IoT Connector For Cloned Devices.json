[{"id":"72a32f8b.6efc3","type":"tab","label":"Generic IoT Connection","disabled":false,"info":"","env":[]},{"id":"9077d033.422db","type":"mqtt out","z":"72a32f8b.6efc3","name":"Generic IoT Connector","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5b11c93c.993688","x":760,"y":220,"wires":[]},{"id":"94810329.f0eeb","type":"mqtt in","z":"72a32f8b.6efc3","name":"ev/data","topic":"glp/0/+/ev/data","qos":"2","datatype":"auto","broker":"1d52df72.1bbe61","nl":false,"rap":true,"rh":0,"inputs":0,"x":90,"y":160,"wires":[["fdb4ef58fed07b9c"]]},{"id":"9a883216.f2f75","type":"mqtt in","z":"72a32f8b.6efc3","name":"cfg","topic":"glp/+/+/fb/dev/+/+/cfg","qos":"2","datatype":"auto","broker":"1d52df72.1bbe61","nl":false,"rap":true,"rh":0,"inputs":0,"x":90,"y":260,"wires":[["fdb4ef58fed07b9c"]]},{"id":"c1d95bc3.acd7d8","type":"debug","z":"72a32f8b.6efc3","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":730,"y":300,"wires":[]},{"id":"fdb4ef58fed07b9c","type":"function","z":"72a32f8b.6efc3","name":"MQTT DP Filter","func":"// User variables\n//  - specify datapointList in \"On Start\" tab\nvar bCacheInitialValues = true;\nvar iCacheTimeout = 30; // seconds\nvar bSendDeviceState = true; //false: payload=data, true: payload = {\"data\":{{DP value}},\"deviceHealth\":{{health}} }\nvar iMaxCachedDps = 1000;\n\n\n//*************************************\n// Function code - don't touch\nvar dpList = context.get('dpList');\nvar deviceList = context.get('deviceList');\nvar dpValueList = context.get('dpValueList'); //cached datapoint list\nvar iInitialTimeMs = context.get('iInitialTimeMs');\nvar i, j, k, m, d, count = 0, topic, topic1, message,  messagePath, data, obj, obj1, path, payload, health, timestamp, dptopic, sid;\nvar deviceName, did,blockName, blockName1, blockIndex, blockIndex1, datapoint, datapoint1, field;\nvar bNotFound, bContinue;\nvar pathNames;\nvar bDeviceNameFound;\nvar bDatapointUpdate = false;\nvar bDeviceUpdate = false;\nvar items;\n\n\nif(iInitialTimeMs === undefined) {\n    if(bCacheInitialValues)\n        iInitialTimeMs = 0;\n    else\n        iInitialTimeMs = -1;\n    context.set('iInitialTimeMs', iInitialTimeMs);\n    dpValueList = [];\n    context.set('dpValueList', dpValueList);\n    deviceList = [];\n    context.set('deviceList', deviceList);\n    node.status({fill:\"red\",shape:\"dot\",text:\"initialized\"});\n}\n\n\nvar mytopic = msg.payload.topic;\n\nif (mytopic === \"Install_Code\") {\n            // Save APOLLO_INSTALL_CODE\n            installCode = msg.payload.data;\n    return; // Finished with this update\n}\n\nelse if(dpList !== undefined) {\n    if(dpList === null)\n        return;\n    if(dpList.length > 0) {\n        topic = msg.topic;\n        if(topic.endsWith(\"/cfg\")) {\n            payload = JSON.parse(msg.payload);\n            deviceName = payload.name;\n            if(deviceName == \"\") {\n                items = topic.split(\"/\");\n                if(items.length > 2)\n                    deviceName = items[items.length - 2];\n            }\n            bNotFound = true;\n            if(iInitialTimeMs === 0) {\n                d = new Date();\n                iInitialTimeMs = d.getTime() + (iCacheTimeout * 1000);\n                context.set('iInitialTimeMs', iInitialTimeMs);\n                node.status({fill:\"yellow\",shape:\"dot\",text:\"Device cfg\"})\n            }\n            for(i=0; i < deviceList.length; i++)\n            {\n                if(deviceList[i].name === deviceName) {\n                    \n                    bNotFound = false;\n                    break;\n                }\n            }\n        \n            if(bNotFound) {\n                obj = {};\n                obj.name = deviceName;\n                obj.name1 = deviceName.toLowerCase();\n                obj.topic = topic;\n                pathNames = topic.split(\"/\");\n                obj.did = pathNames[6]; //DID\n                deviceList.push(obj);\n                context.set('deviceList',deviceList);\n            \n                // check \n                for(i=0; i < dpList.length; i++)\n                {\n                    bContinue = false;\n                    // type: 0= \"*\", 1=\">{device name\", 2 = {device name}, 3=starts with \"*\", 4 = ends with \"*\"\n                    if(dpList[i].pathNames[0].type === 1) {\n                        if(obj.name1.indexOf(dpList[i].pathNames[0].name) !== -1) {\n                            bContinue = true;\n                        }\n                    }\n                    else if(dpList[i].pathNames[0].type === 3) {\n                        if(obj.name1.endsWith(dpList[i].pathNames[0].name)) \n                            bContinue = true;\n                    }\n                    else if(dpList[i].pathNames[0].type === 4) {\n                        if(obj.name1.startsWith(dpList[i].pathNames[0].name)) \n                            bContinue = true;\n                    }\n                    else if(dpList[i].pathNames[0].type === 2) {\n                        if(dpList[i].pathNames[0].name === obj.name1) \n                            bContinue = true;\n                    }\n                \n                    if(bContinue) {\n                        obj1 = {};\n                        obj1.name = obj.name;\n                        obj1.name1 = obj.name1;\n                        obj1.did = obj.did;\n                        dpList[i].deviceList.push(obj1);\n                        context.set('dpList', dpList);\n                        \n                    }\n                    if(iInitialTimeMs > 0) {\n                        // cache\n                        if(dpValueList.length > 0) {\n                            for(k=0; k <dpValueList.length; k++)\n                            {\n                                if(dpValueList[k].did === obj.did) {\n                                    bDeviceUpdate = true;  //device used for at least one cached datapoint\n                                    break;\n                                }\n                            }\n                            \n                        }\n                    }\n                }\n            }\n        }\n        else if(topic.endsWith(\"/ev/data\")) {\n            bDatapointUpdate = true;\n        }    \n        if(bDatapointUpdate || bDeviceUpdate)   {\n            \n            \n            count = 1;\n            if(bDeviceUpdate)\n                count  = dpValueList.length;\n            \n            for(m=0; m < count; m++)\n            {\n                bContinue = true;\n                if(bDeviceUpdate) {\n                    topic1 = dpValueList[m].topic;\n                    payload = dpValueList[m].payload;\n                    bContinue = dpValueList[m].bSend;\n                }\n                else {\n                    payload = JSON.parse(msg.payload);\n                    topic1 = payload.topic;\n                }\n                if(bContinue) { //(topic1.indexOf(\"/fb/dev/\") !== -1) {\n                    message = payload.message\n                    data = payload.data\n                    \n                    pathNames = topic1.split(\"/\");\n                    if(pathNames.length === 10) {\n                \n                        did = pathNames[6];\n                        blockName = pathNames[8];\n                        blockName1 = blockName.toLowerCase();\n                        blockIndex = pathNames[9];\n                        messagePath = message.split(\"/\");\n                        datapoint = messagePath[0];\n                        datapoint1 = datapoint.toLowerCase();\n                        field = \"\";\n                        for(i=0; i < dpList.length; i++)\n                        {\n                            bContinue = true;\n                            path = \"\";\n                            // device\n                            bDeviceNameFound = false;\n                            if(dpList[i].pathNames[0].name !== \"*\") {\n                                if(deviceList === undefined)\n                                    deviceList = [];\n        \n                                bContinue = false;\n                                for(j=0; j < dpList[i].deviceList.length; j++)\n                                {\n                 \n                                    if(dpList[i].deviceList[j].did === did) {\n                                        bContinue = true;\n                                        path = dpList[i].deviceList[j].name;\n                                        bDeviceNameFound = true;\n                                        break;\n                                    }\n                                }\n                                if(iInitialTimeMs >= 0) {\n                                    if(!bContinue) {\n                                        // type: 0= \"*\", 1=\">{device name\", 2 = {device name}, 3=starts with \"*\", 4 = ends with \"*\"\n                                        bContinue = true; // save to cache file\n                                    }\n                                }\n                    \n                            }\n                            if(bContinue) {\n                                \n                                // blockname\n                                if(dpList[i].pathNames[1].name !== \"*\") {\n                                    bContinue = false;\n                                    if(dpList[i].pathNames[1].type === 1) {\n                                        if(blockName1.indexOf(dpList[i].pathNames[1].name) !== -1)\n                                            bContinue = true;\n                                    }\n                                    else if(dpList[i].pathNames[1].type === 3) {\n                                        // \"*{datapoint substr}\"\n                                        if(blockName1.endsWith(dpList[i].pathNames[1].name)) \n                                            bContinue = true;\n                                            \n                                    }\n                                    else if(dpList[i].pathNames[1].type === 4) {\n                                        // \"{datapoint substr}*\"\n                                        if(blockName1.startsWith(dpList[i].pathNames[1].name)) \n                                            bContinue = true;\n                                    }\n                                    else {\n                                        if(dpList[i].pathNames[1].name === blockName1)\n                                            bContinue = true;\n                                    }\n                                }\n                            }\n                            if(bContinue) {\n                                // blockIndex\n                                if(dpList[i].pathNames[2].name !== \"*\") {\n                                    bContinue = false;\n                                    if(dpList[i].pathNames[2].type === 1) {\n                                        if(blockIndex.indexOf(dpList[i].pathNames[2].name) !== -1)\n                                            bContinue = true;\n                                    }\n                                    else if(dpList[i].pathNames[2].type === 3) {\n                                        // \"*{datapoint substr}\"\n                                        if(blockIndex.endsWith(dpList[i].pathNames[2].name)) \n                                            bContinue = true;\n                                    }\n                                    else if(dpList[i].pathNames[2].type === 4) {\n                                        // \"{datapoint substr}*\"\n                                        if(blockIndex.startsWith(dpList[i].pathNames[2].name)) \n                                            bContinue = true;\n                                    }\n                                    else {\n                                        if(dpList[i].pathNames[2].name === blockIndex)\n                                            bContinue = true;\n                                    }\n                                }\n                            }\n                            if(bContinue) {\n                                // datapoint\n                                if(dpList[i].pathNames[3].name !== \"*\") {\n                                    bContinue = false;\n                                    if(dpList[i].pathNames[3].type === 1) {\n                                        // \"~{datapoint substr}\"\n                                        \n                                        if(datapoint1.indexOf(dpList[i].pathNames[3].name) !== -1) \n                                            bContinue = true;\n                                    }\n                                    else if(dpList[i].pathNames[3].type === 3) {\n                                        // \"*{datapoint substr}\"\n                                        if(datapoint1.endsWith(dpList[i].pathNames[3].name)) \n                                            bContinue = true;\n                                    }\n                                    else if(dpList[i].pathNames[3].type === 4) {\n                                        // \"{datapoint substr}*\"\n                                        if(datapoint1.startsWith(dpList[i].pathNames[3].name)) \n                                            bContinue = true;\n                                    }\n                                    else {\n                                        if(dpList[i].pathNames[3].name === datapoint1)\n                                            bContinue = true;\n                                    }\n                                }\n                                if(bContinue) {\n                                    // check for fields\n                                    data = payload.data;\n                                    health = payload.health;\n                                    timestamp = payload.ts;\n                                    sid = payload.topic;// Derive SID \n                                    sid = sid.slice(6,13);\n                                    if(dpList[i].pathNames.length === 5) {\n                                        // field exact match only - case sensitive\n                                        if(data.hasOwnProperty(dpList[i].pathNames[4].name)) {\n                                            field = \"/\" + dpList[i].pathNames[4].name;\n                                            data = data[dpList[i].pathNames[4].name];\n                                        }\n                                        else \n                                            bContinue = false;\n                                    }\n                                }\n                            }\n                            if(bContinue) {\n                                // valid datapoint so send datapoint update\n                                if(dpList[i].pathNames[0].name === \"*\") {\n                                    bContinue = false;\n                                    if(deviceList === undefined)\n                                        deviceList = [];\n                                    for(j=0; j < deviceList.length; j++)\n                                    {\n                                        if(deviceList[j].did === did) {\n                                            bDeviceNameFound = true;\n                                            bContinue = true;\n                                            path = deviceList[j].name;\n                                            break;\n                                        }\n                                        \n                                    }\n                                    \n                                }\n                                \n                                if(bContinue && bDeviceNameFound) {\n                                    path += \"/\" + blockName + \"/\" + blockIndex + \"/\" + datapoint + field;\n                                    if(bDeviceUpdate) {\n                                        dpValueList[m].bSend = false;\n                                    }\n                                }\n                                else {\n                                    bContinue = false;\n                                    if(bDatapointUpdate) {\n                                        if(iInitialTimeMs >= 0) {\n                                            // no device name but block/blockIndex/datapoint matches at least one\n                                            // check if datapoint already in \n                                            node.status({fill:\"blue\",shape:\"dot\",text:\"caching DP values\"})\n                                             \n                                             // add to dpValueList or if already there update value/health\n                                            bNotFound = true; \n                                            for(k=0; k <dpValueList.length; k++)\n                                            {\n                                                if(dpValueList[k].topic === topic1) {\n                                                    dpValueList[k].payload = payload;\n                                                    bNotFound = false;\n                                                    context.set('dpValueList', dpValueList);\n                                                    break;\n                                                }\n                                            }\n                                            if(bNotFound) {\n                                                if(dpValueList.length < iMaxCachedDps) {\n                                                    obj = {};\n                                                    obj.did = did; \n                                                    obj.topic = topic1;\n                                                    obj.payload = payload;\n                                                    obj.bSend = true;\n                                                    dpValueList.push(obj);\n                                                    context.set('dpValueList', dpValueList);\n                                                }\n                                            }\n                                            \n                                        }\n                                    }\n                                }\n                                break;\n                            }\n                            \n                        }\n                        if(bContinue) {\n                            msg = {};\n                            msg.topic = path;\n                            if(typeof data === \"object\") {\n                                data = JSON.stringify(data);\n                            }\n                            if(bSendDeviceState) {\n                                // Adjustments for use specific payloads\n                                obj = {};\n                                obj.ingest_key = installCode;\n                                obj.external_id = path;\n                                obj.data = data;\n                                obj.timestamp = timestamp;\n                                //obj.deviceHealth = health; // this may need to be customized for each site\n                                msg.payload = JSON.stringify(obj);\n                            }\n                            else\n                                msg.payload = data;\n                            // Wait for installCode to be populated\n                            if (installCode != \"\") {\n                                node.send(msg);\n                            }\n                            if(bDatapointUpdate)\n                                break;\n                        }\n                    }\n                }\n            } //for(m=0; m < count; m++)\n        }\n        if(iInitialTimeMs > 0) {\n            d = new Date();\n            if(d.getTime() > iInitialTimeMs) {\n                iInitialTimeMs = -1; //stop cacheing datapoints\n                context.set('iInitialTimeMs', iInitialTimeMs);\n                dpValueList = [];\n                context.set('dpValueList', dpValueList);\n                node.status({fill:\"green\",shape:\"dot\",text:\"running\"})\n            }\n        }\n    }\n}\nreturn; ","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n// Examples\n//    \"Tstat-01/AV/7/Room Temperature\",\n//    \"Pulsegen*/AV/7/Room Temperature\",\n//    \"*/*/*/~Light\",\n//    \"*/*/*/nviLamp\",\n//    \"*/*/*/nvoLampFb/value\",\n//    \"~.PulseGen/*/*/~lux\",\n//    \"*/*/*/*Fb/value\",   \n//    \"*/*/*/nviD*\"\n\nconst datapointList = [\n    \"Tstat-01/AV/7/Room Temperature\",\n    \"*/*/*/*\",\n    \"*/*/*/Occupied Heat Setpoint\",\n    \"*/*/1/*iLamp\",\n    \"*/*/*/nvoLampFb/value\",\n    \"~.PulseGen/*/*/~lux\",\n    \"LoRaGateway/*/*/*\",\n    \"*/*/*/nviD*\",\n    \"*/*/*/nvoD*/value\"\n    ];\n    \nvar dpList = [];\nvar pathsNames, pathNames1;\nvar obj;\nvar i;\n\nvar installCode = \"\"; // Used for APOLLO_INSTALL_CODE\n\n\nif(context.get(\"dpList\") === undefined) {\n    if(typeof datapointList !== undefined) {\n        if(datapointList.length > 0) {\n            for(i=0; i < datapointList.length; i++)\n            {\n                obj = {};\n                if(datapointList[i] !== \"\") {\n                    pathNames = datapointList[i].toLowerCase().split(\"/\");\n                    pathNames1 = [];\n                \n                    for(j=0; j < pathNames.length; j++)\n                    {\n                        pathNames[j] = pathNames[j].trim();\n                        obj1 = {};\n                        obj1.name = pathNames[j];\n                        obj1.type = 2; // 0= \"*\", \">{device name\", 2 = {device name}, 3=starts with \"*\", 4 = ends with \"*\"\n                        if(j === 0)\n                            obj.needDeviceDid = true;\n                        if(pathNames[j] === \"*\") {\n                            if(j === 0)\n                                obj.needDeviceDid = false;\n                            obj1.type = 0;\n                        }\n                        else {\n                            if(pathNames[j].charAt(0) === \"~\") {\n                                // \"~{datapoint substr}\"\n                                obj1.type = 1;\n                                obj1.name = pathNames[j].substr(1);\n                            }\n                            else if(pathNames[j].charAt(0) === \"*\") {\n                                if(pathNames[j].endsWith(\"*\")) {\n                                    // \"*{datapoint substr}*\" same as \"~{datapoint substr}\"\n                                    obj1.type = 1;\n                                    obj1.name = pathNames[j].substr(1, (pathNames[j].length - 2));\n                                }\n                                else {\n                                    // \"*{datapoint substr}\"\n                                    obj1.type = 3;\n                                    obj1.name = pathNames[j].substr(1);\n                                }\n                                \n                            }\n                            else if(pathNames[j].endsWith(\"*\")) {\n                                    // \"{datapoint substr}*\"\n                                    obj1.type = 4;\n                                    obj1.name = pathNames[j].substr(0, (pathNames[j].length - 1));\n                            }\n                            \n                        }\n                        pathNames1.push(obj1);\n                    }\n                        \n                    obj.path = datapointList[i];\n                    obj.pathNames = [];\n                    obj.origPathnames = pathNames;\n                    obj.pathNames = pathNames1;\n                    obj.deviceList = [];\n                    dpList.push(obj);  \n                    \n                }\n            }\n            context.set(\"dpList\",dpList);\n            context.set(\"datapointList\",datapointList);\n\n        }\n    }\n}","finalize":"","libs":[],"x":380,"y":200,"wires":[["c1d95bc3.acd7d8","9077d033.422db","06859ec5c93b492d"]]},{"id":"3ac03b4863450073","type":"function","z":"72a32f8b.6efc3","name":"Derive Install Code","func":"var msg1 = {};\nmsg1.payload = {};\nmsg1.data = {};\n\nvar installCode = \"\";\nvar fileLineString = \"\";\n\nfileLineString = msg.payload;\n\nif (fileLineString.includes(\"APOLLO_INSTALL_CODE\")){\n    // We have the correct string, now isolate the true SID\n    // Find occorance of \"=\"\n    var index = fileLineString.indexOf(\"=\");\n    installCode = fileLineString.substring( (index + 1), (index + 8));\n    msg1.payload.topic = \"Install_Code\";\n    msg1.payload.data = installCode;\n    return msg1;\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":300,"wires":[["fdb4ef58fed07b9c"]]},{"id":"ef5a164db930feee","type":"file in","z":"72a32f8b.6efc3","name":"Read Environment File","filename":"/etc/environment","format":"lines","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":400,"y":400,"wires":[["3ac03b4863450073"]]},{"id":"e7f96290012230ea","type":"inject","z":"72a32f8b.6efc3","name":"Delayed Starter","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"5","topic":"","payloadType":"date","x":120,"y":400,"wires":[["ef5a164db930feee"]]},{"id":"06859ec5c93b492d","type":"google-cloud-pubsub out","z":"72a32f8b.6efc3","account":"","keyFilename":"","topic":"","name":"GCP PubSub","x":740,"y":140,"wires":[[]]},{"id":"5b11c93c.993688","type":"mqtt-broker","name":"AWS","broker":"","port":"8883","tls":"3d9a5e0e.d0fd12","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"1d52df72.1bbe61","type":"mqtt-broker","name":"","broker":"127.0.0.1","port":"1883","clientid":"","usetls":false,"compatmode":false,"protocolVersion":4,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"3d9a5e0e.d0fd12","type":"tls-config","name":"Generic TLS","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true,"alpnprotocol":""}]