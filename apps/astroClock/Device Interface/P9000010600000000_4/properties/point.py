# Copyright (C) 2013-2021 Echelon Corporation.  All Rights Reserved.
# Use of this code is subject to your compliance with the terms of the
# Echelon IzoT(tm) Software Developer's Kit License Agreement which is
# available at www.echelon.com/license/izot_sdk/.

# IzoT resources contained in this file are generated by an automated
# database to source code conversion process.  Grammar and punctuation within
# the embedded documentation may not be correct, as this data is gathered and
# combined from several sources.
# Names of resources and fields or members defined within a resource are
# derived from the same sources.  Names, capitalization and aspects of source
# code formatting may fail to comply with PEP-8 and PEP-257 recommendations
# due to the automated generation of these IzoT definitions.
# Generated at 24-Aug-2021 09:17.

"""point userdefined property type, originally defined in resource file set
apollodev 90:00:01:06:00:00:00:00-4."""


import izot.resources.base
from P9000010600000000_4.userdefined import userdefined


class point(izot.resources.base.Structure):
    """point userdefined property type.  ."""

    def __init__(self):
        super().__init__(
            key=3,
            scope=4
        )

        self.___bf00 = izot.resources.base.Scaled(
            size=1,
            signed=False
        )
        self._register(('___bf00', self.___bf00))
        self._default_bytes = b'\x00'
        self._original_name = 'UCPTpoint'
        self._property_scope, self._property_key = 4, 3
        self._definition = userdefined.add(self)
    def __set_A(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=0
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_A(self):
        return self.___bf00._getbits(
            size=1,
            offset=0,
            signed=False
        )

    A = property(
        __get_A,
        __set_A,
        None,
        """Bitfield A"""
    )

    def __set_B(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=1
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_B(self):
        return self.___bf00._getbits(
            size=1,
            offset=1,
            signed=False
        )

    B = property(
        __get_B,
        __set_B,
        None,
        """Bitfield B"""
    )

    def __set_C(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=2
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_C(self):
        return self.___bf00._getbits(
            size=1,
            offset=2,
            signed=False
        )

    C = property(
        __get_C,
        __set_C,
        None,
        """Bitfield C"""
    )

    def __set_D(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=3
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_D(self):
        return self.___bf00._getbits(
            size=1,
            offset=3,
            signed=False
        )

    D = property(
        __get_D,
        __set_D,
        None,
        """Bitfield D"""
    )

    def __set_E(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=4
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_E(self):
        return self.___bf00._getbits(
            size=1,
            offset=4,
            signed=False
        )

    E = property(
        __get_E,
        __set_E,
        None,
        """Bitfield E"""
    )

    def __set_F(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=5
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_F(self):
        return self.___bf00._getbits(
            size=1,
            offset=5,
            signed=False
        )

    F = property(
        __get_F,
        __set_F,
        None,
        """Bitfield F"""
    )

    def __set_G(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=6
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_G(self):
        return self.___bf00._getbits(
            size=1,
            offset=6,
            signed=False
        )

    G = property(
        __get_G,
        __set_G,
        None,
        """Bitfield G"""
    )

    def __set_H(self, v):
        if 0 <= v <= 1:
            self.___bf00._setbits(
                value=v,
                size=1,
                offset=7
            )
        else:
            raise ValueError('Not in range 0..1')

    def __get_H(self):
        return self.___bf00._getbits(
            size=1,
            offset=7,
            signed=False
        )

    H = property(
        __get_H,
        __set_H,
        None,
        """Bitfield H"""
    )


    def __len__(self):
        """Return the length of the type, in bytes."""
        return 1


if __name__ == '__main__':
    # unit test code.
    item = point()
    pass
