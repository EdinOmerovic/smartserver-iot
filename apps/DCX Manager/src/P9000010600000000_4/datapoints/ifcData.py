# Copyright (C) 2013-2023 Echelon Corporation.  All Rights Reserved.
# Use of this code is subject to your compliance with the terms of the
# Echelon IzoT(tm) Software Developer's Kit License Agreement which is
# available at www.echelon.com/license/izot_sdk/.

# IzoT resources contained in this file are generated by an automated
# database to source code conversion process.  Grammar and punctuation within
# the embedded documentation may not be correct, as this data is gathered and
# combined from several sources.
# Names of resources and fields or members defined within a resource are
# derived from the same sources.  Names, capitalization and aspects of source
# code formatting may fail to comply with PEP-8 and PEP-257 recommendations
# due to the automated generation of these IzoT definitions.
# Generated at 11-May-2023 17:11.

"""ifcData userdefined datapoint type, originally defined in resource file
set apollodev 90:00:01:06:00:00:00:00-4.  """


import izot.resources.base
from P9000010600000000_4.userdefined import userdefined


class ifcData(izot.resources.base.Structure):
    """ifcData userdefined datapoint type.  ."""

    def __init__(self):
        super().__init__(
            key=12,
            scope=4
        )

        self.__rxPackets = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('rxPackets', self.__rxPackets))

        self.__rxBytes = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('rxBytes', self.__rxBytes))

        self.__txPackets = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('txPackets', self.__txPackets))

        self.__txBytes = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('txBytes', self.__txBytes))

        self.__rxErrors = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('rxErrors', self.__rxErrors))

        self.__txErrors = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('txErrors', self.__txErrors))

        self.__rxDropped = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('rxDropped', self.__rxDropped))

        self.__txDropped = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('txDropped', self.__txDropped))

        self.__rxOverrun = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('rxOverrun', self.__rxOverrun))

        self.__txOverrun = izot.resources.base.Scaled(
            size=4,
            signed=False,
            minimum=0,
            maximum=4294967295
        )
        self._register(('txOverrun', self.__txOverrun))
        self._original_name = 'UNVTifcData'
        self._definition = userdefined.add(self)


    def __set_rxPackets(self, v):
        self.__rxPackets._value = v

    rxPackets = property(
        lambda self: self.__rxPackets._value,
        __set_rxPackets,
        None,
        """."""
    )

    def __set_rxBytes(self, v):
        self.__rxBytes._value = v

    rxBytes = property(
        lambda self: self.__rxBytes._value,
        __set_rxBytes,
        None,
        """."""
    )

    def __set_txPackets(self, v):
        self.__txPackets._value = v

    txPackets = property(
        lambda self: self.__txPackets._value,
        __set_txPackets,
        None,
        """."""
    )

    def __set_txBytes(self, v):
        self.__txBytes._value = v

    txBytes = property(
        lambda self: self.__txBytes._value,
        __set_txBytes,
        None,
        """."""
    )

    def __set_rxErrors(self, v):
        self.__rxErrors._value = v

    rxErrors = property(
        lambda self: self.__rxErrors._value,
        __set_rxErrors,
        None,
        """."""
    )

    def __set_txErrors(self, v):
        self.__txErrors._value = v

    txErrors = property(
        lambda self: self.__txErrors._value,
        __set_txErrors,
        None,
        """."""
    )

    def __set_rxDropped(self, v):
        self.__rxDropped._value = v

    rxDropped = property(
        lambda self: self.__rxDropped._value,
        __set_rxDropped,
        None,
        """."""
    )

    def __set_txDropped(self, v):
        self.__txDropped._value = v

    txDropped = property(
        lambda self: self.__txDropped._value,
        __set_txDropped,
        None,
        """."""
    )

    def __set_rxOverrun(self, v):
        self.__rxOverrun._value = v

    rxOverrun = property(
        lambda self: self.__rxOverrun._value,
        __set_rxOverrun,
        None,
        """."""
    )

    def __set_txOverrun(self, v):
        self.__txOverrun._value = v

    txOverrun = property(
        lambda self: self.__txOverrun._value,
        __set_txOverrun,
        None,
        """."""
    )

    def __len__(self):
        """Return the length of the type, in bytes."""
        return 40


if __name__ == '__main__':
    # unit test code.
    item = ifcData()
    pass
