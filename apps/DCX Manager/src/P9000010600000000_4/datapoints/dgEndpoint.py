# Copyright (C) 2013-2023 Echelon Corporation.  All Rights Reserved.
# Use of this code is subject to your compliance with the terms of the
# Echelon IzoT(tm) Software Developer's Kit License Agreement which is
# available at www.echelon.com/license/izot_sdk/.

# IzoT resources contained in this file are generated by an automated
# database to source code conversion process.  Grammar and punctuation within
# the embedded documentation may not be correct, as this data is gathered and
# combined from several sources.
# Names of resources and fields or members defined within a resource are
# derived from the same sources.  Names, capitalization and aspects of source
# code formatting may fail to comply with PEP-8 and PEP-257 recommendations
# due to the automated generation of these IzoT definitions.
# Generated at 11-May-2023 17:11.

"""dgEndpoint userdefined datapoint type, originally defined in resource file
set apollodev 90:00:01:06:00:00:00:00-4.  """


import izot.resources.base
from P9000010600000000_4.userdefined import userdefined


class dgEndpoint(izot.resources.base.Structure):
    """dgEndpoint userdefined datapoint type.  ."""

    def __init__(self):
        super().__init__(
            key=25,
            scope=4
        )

        self.__b0 = izot.resources.base.Scaled(
            size=1,
            signed=True,
            minimum=-128,
            maximum=127
        )
        self._register(('b0', self.__b0))

        self.__b1 = izot.resources.base.Scaled(
            size=1,
            signed=True,
            minimum=-128,
            maximum=127
        )
        self._register(('b1', self.__b1))

        self.__b2 = izot.resources.base.Scaled(
            size=1,
            signed=True,
            minimum=-128,
            maximum=127
        )
        self._register(('b2', self.__b2))

        self.__b3 = izot.resources.base.Scaled(
            size=1,
            signed=True,
            minimum=-128,
            maximum=127
        )
        self._register(('b3', self.__b3))

        self.__b4 = izot.resources.base.Scaled(
            size=1,
            signed=True,
            minimum=-128,
            maximum=127
        )
        self._register(('b4', self.__b4))

        self.__b5 = izot.resources.base.Scaled(
            size=1,
            signed=True,
            minimum=-128,
            maximum=127
        )
        self._register(('b5', self.__b5))
        self._original_name = 'UNVTdgEndpoint'
        self._definition = userdefined.add(self)


    def __set_b0(self, v):
        self.__b0._value = v

    b0 = property(
        lambda self: self.__b0._value,
        __set_b0,
        None,
        """."""
    )

    def __set_b1(self, v):
        self.__b1._value = v

    b1 = property(
        lambda self: self.__b1._value,
        __set_b1,
        None,
        """."""
    )

    def __set_b2(self, v):
        self.__b2._value = v

    b2 = property(
        lambda self: self.__b2._value,
        __set_b2,
        None,
        """."""
    )

    def __set_b3(self, v):
        self.__b3._value = v

    b3 = property(
        lambda self: self.__b3._value,
        __set_b3,
        None,
        """."""
    )

    def __set_b4(self, v):
        self.__b4._value = v

    b4 = property(
        lambda self: self.__b4._value,
        __set_b4,
        None,
        """."""
    )

    def __set_b5(self, v):
        self.__b5._value = v

    b5 = property(
        lambda self: self.__b5._value,
        __set_b5,
        None,
        """."""
    )

    def __len__(self):
        """Return the length of the type, in bytes."""
        return 6


if __name__ == '__main__':
    # unit test code.
    item = dgEndpoint()
    pass
