# Copyright (C) 2013-2023 Echelon Corporation.  All Rights Reserved.
# Use of this code is subject to your compliance with the terms of the
# Echelon IzoT(tm) Software Developer's Kit License Agreement which is
# available at www.echelon.com/license/izot_sdk/.

# IzoT resources contained in this file are generated by an automated
# database to source code conversion process.  Grammar and punctuation within
# the embedded documentation may not be correct, as this data is gathered and
# combined from several sources.
# Names of resources and fields or members defined within a resource are
# derived from the same sources.  Names, capitalization and aspects of source
# code formatting may fail to comply with PEP-8 and PEP-257 recommendations
# due to the automated generation of these IzoT definitions.
# Generated at 11-May-2023 17:11.

"""LS_state userdefined enumeration type, originally defined in resource file
set apollodev 90:00:01:06:00:00:00:00-4."""


import izot.resources.base
from P9000010600000000_4.userdefined import userdefined


class LS_state(izot.resources.base.Enumeration):
    """LS_state userdefined enumeration."""

    MEM_NUL = -1

    # NOTE member LS_UNUSED was renamed to MEM_UNUSED to obtain a common
    # prefix throughout this enumeration.
    # Unused.
    MEM_UNUSED = 0

    # NOTE member LS_UNKNOWN was renamed to MEM_UNKNOWN to obtain a common
    # prefix throughout this enumeration.
    # Unknown.
    MEM_UNKNOWN = 1

    # NOTE member LS_NORMAL was renamed to MEM_NORMAL to obtain a common
    # prefix throughout this enumeration.
    # Normal.
    MEM_NORMAL = 2

    # NOTE member LS_LEAK_DETECTED was renamed to MEM_LEAK_DETECTED to obtain
    # a common prefix throughout this enumeration.
    # Leak Detected.
    MEM_LEAK_DETECTED = 3

    def __init__(self):
        super().__init__(
            key=7,
            scope=4,
            prefix='MEM_'
        )
        self._original_name = 'LS_state'
        self._definition = userdefined.add(self)


if __name__ == '__main__':
    # unit test code.
    item = LS_state()
    pass
